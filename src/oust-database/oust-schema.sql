-- MySQL Script generated by MySQL Workbench
-- Sun 22 Jan 2017 03:41:05 PM CET
-- Model: oust-schema    Version: 1.0
-- Authors: Tano Iannetta, Loan Lassalle et Jérémie Zanone
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL';

-- -----------------------------------------------------
-- Schema oust
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `oust` ;

-- -----------------------------------------------------
-- Schema oust
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `oust` DEFAULT CHARACTER SET utf8 ;
USE `oust` ;

-- -----------------------------------------------------
-- Table `oust`.`droits_acces`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `oust`.`droits_acces` ;

CREATE TABLE IF NOT EXISTS `oust`.`droits_acces` (
  `droits_acces_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `droits_acces` VARCHAR(45) NOT NULL,
  `details_droits` VARCHAR(100) NULL,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`droits_acces_id`),
  UNIQUE INDEX `droits_acces_id_UNIQUE` (`droits_acces_id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `oust`.`commune`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `oust`.`commune` ;

CREATE TABLE IF NOT EXISTS `oust`.`commune` (
  `commune_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `commune` VARCHAR(45) NOT NULL,
  `canton` VARCHAR(45) NOT NULL,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`commune_id`),
  UNIQUE INDEX `commune_id_UNIQUE` (`commune_id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `oust`.`dechetterie`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `oust`.`dechetterie` ;

CREATE TABLE IF NOT EXISTS `oust`.`dechetterie` (
  `dechetterie_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `dechetterie` VARCHAR(45) NOT NULL,
  `gps_latitude` DECIMAL(12,6) NULL,
  `gps_longitude` DECIMAL(12,6) NULL,
  `nom_responsable` VARCHAR(45) NOT NULL,
  `jours_ouvertures` VARCHAR(62) NOT NULL,
  `heures_ouvertures` VARCHAR(45) NULL,
  `no_telephone` VARCHAR(12) NOT NULL,
  `systeme_sacs` TINYINT(1) NULL,
  `remarques` VARCHAR(200) NULL,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`dechetterie_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `oust`.`localite`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `oust`.`localite` ;

CREATE TABLE IF NOT EXISTS `oust`.`localite` (
  `localite_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `localite` VARCHAR(45) NOT NULL,
  `commune_id` INT UNSIGNED NOT NULL,
  `dechetterie_id` INT UNSIGNED NOT NULL,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`localite_id`),
  INDEX `fk_localite_commune1_idx` (`commune_id` ASC),
  INDEX `fk_localite_dechetterie1_idx` (`dechetterie_id` ASC),
  CONSTRAINT `fk_localite_commune1`
    FOREIGN KEY (`commune_id`)
    REFERENCES `oust`.`commune` (`commune_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_localite_dechetterie1`
    FOREIGN KEY (`dechetterie_id`)
    REFERENCES `oust`.`dechetterie` (`dechetterie_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `oust`.`employe`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `oust`.`employe` ;

CREATE TABLE IF NOT EXISTS `oust`.`employe` (
  `employe_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nom` VARCHAR(45) NOT NULL,
  `prenom` VARCHAR(45) NOT NULL,
  `adresse_rue` VARCHAR(45) NOT NULL,
  `adresse_numero` INT(3) UNSIGNED NOT NULL,
  `adresse_code_postal` INT(4) UNSIGNED NOT NULL,
  `localite_id` INT UNSIGNED NOT NULL,
  `no_telephone` VARCHAR(12) NOT NULL,
  `email` VARCHAR(100) NULL,
  `iban` VARCHAR(34) NOT NULL,
  `salaire_mensuel` INT(6) UNSIGNED NOT NULL,
  `droits_acces_id` INT UNSIGNED NOT NULL,
  `nom_utilisateur` VARCHAR(100) NOT NULL,
  `mot_passe` VARCHAR(128) NOT NULL,
  `remarques` VARCHAR(200) NULL,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`employe_id`),
  UNIQUE INDEX `employe_id_UNIQUE` (`employe_id` ASC),
  INDEX `fk_employe_droits_acces1_idx` (`droits_acces_id` ASC),
  INDEX `fk_employe_localite1_idx` (`localite_id` ASC),
  CONSTRAINT `fk_employe_droits_acces1`
    FOREIGN KEY (`droits_acces_id`)
    REFERENCES `oust`.`droits_acces` (`droits_acces_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_employe_localite1`
    FOREIGN KEY (`localite_id`)
    REFERENCES `oust`.`localite` (`localite_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `oust`.`contrat`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `oust`.`contrat` ;

CREATE TABLE IF NOT EXISTS `oust`.`contrat` (
  `contrat_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `date_creation` TIMESTAMP NOT NULL,
  `date_resiliation` TIMESTAMP NULL,
  `mode_paiement` VARCHAR(45) NOT NULL DEFAULT 'aucun',
  `paye` TINYINT(1) NOT NULL DEFAULT 0,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`contrat_id`),
  UNIQUE INDEX `contrat_id_UNIQUE` USING BTREE (`contrat_id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `oust`.`client`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `oust`.`client` ;

CREATE TABLE IF NOT EXISTS `oust`.`client` (
  `client_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nom` VARCHAR(45) NOT NULL,
  `prenom` VARCHAR(45) NOT NULL,
  `adresse_rue` VARCHAR(45) NOT NULL,
  `adresse_numero` INT(3) NOT NULL,
  `adresse_code_postal` INT(4) NOT NULL,
  `localite_id` INT UNSIGNED NOT NULL,
  `gps_latitude` DECIMAL(12,6) NULL,
  `gps_longitude` DECIMAL(12,6) NULL,
  `no_telephone` VARCHAR(12) NOT NULL,
  `email` VARCHAR(100) NULL,
  `iban` VARCHAR(34) NOT NULL,
  `prochain_passage` TIMESTAMP NULL,
  `jour_collect` VARCHAR(9) NOT NULL DEFAULT 'Monday',
  `remarques` VARCHAR(200) NULL,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`client_id`),
  UNIQUE INDEX `client_id_UNIQUE` (`client_id` ASC),
  INDEX `fk_client_localite1_idx` (`localite_id` ASC),
  CONSTRAINT `fk_client_localite1`
    FOREIGN KEY (`localite_id`)
    REFERENCES `oust`.`localite` (`localite_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `oust`.`boite`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `oust`.`boite` ;

CREATE TABLE IF NOT EXISTS `oust`.`boite` (
  `boite_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `format_boite` VARCHAR(45) NOT NULL,
  `prix` INT(4) UNSIGNED NOT NULL,
  `client_id` INT UNSIGNED NULL,
  `etat` VARCHAR(9) NOT NULL,
  `date_pret` TIMESTAMP NULL,
  `date_retour` TIMESTAMP NULL,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`boite_id`),
  UNIQUE INDEX `boite_id_UNIQUE` (`boite_id` ASC),
  INDEX `fk_boite_client1_idx` (`client_id` ASC),
  CONSTRAINT `fk_boite_client1`
    FOREIGN KEY (`client_id`)
    REFERENCES `oust`.`client` (`client_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `oust`.`formule`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `oust`.`formule` ;

CREATE TABLE IF NOT EXISTS `oust`.`formule` (
  `formule_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `type` VARCHAR(45) NOT NULL,
  `duree_mois` INT(3) UNSIGNED NOT NULL DEFAULT 1,
  `prix` INT(4) UNSIGNED NOT NULL,
  `nombre_passage_mois` TINYINT(2) UNSIGNED NOT NULL DEFAULT 1,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`formule_id`),
  UNIQUE INDEX `option_id_UNIQUE` (`formule_id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `oust`.`vehicule`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `oust`.`vehicule` ;

CREATE TABLE IF NOT EXISTS `oust`.`vehicule` (
  `vehicule_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `plaque` VARCHAR(8) NOT NULL,
  `modele` VARCHAR(45) NOT NULL,
  `kilometrage` INT(6) UNSIGNED NOT NULL,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`vehicule_id`),
  UNIQUE INDEX `vehicule_id_UNIQUE` (`vehicule_id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `oust`.`mission`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `oust`.`mission` ;

CREATE TABLE IF NOT EXISTS `oust`.`mission` (
  `mission_id` TIMESTAMP NOT NULL,
  `localite_id` INT UNSIGNED NOT NULL,
  `employe_id` INT UNSIGNED NOT NULL,
  `vehicule_id` INT UNSIGNED NOT NULL,
  `duree_heure` INT(3) UNSIGNED NOT NULL,
  `distance_parcourue_km` INT(4) UNSIGNED NOT NULL,
  `remarques` VARCHAR(200) NULL,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`mission_id`, `localite_id`, `employe_id`),
  INDEX `fk_mission_vehicule1_idx` (`vehicule_id` ASC),
  INDEX `fk_mission_employe1_idx` (`employe_id` ASC),
  INDEX `fk_mission_localite1_idx` (`localite_id` ASC),
  CONSTRAINT `fk_mission_vehicule1`
    FOREIGN KEY (`vehicule_id`)
    REFERENCES `oust`.`vehicule` (`vehicule_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_mission_employe1`
    FOREIGN KEY (`employe_id`)
    REFERENCES `oust`.`employe` (`employe_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_mission_localite1`
    FOREIGN KEY (`localite_id`)
    REFERENCES `oust`.`localite` (`localite_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `oust`.`prestation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `oust`.`prestation` ;

CREATE TABLE IF NOT EXISTS `oust`.`prestation` (
  `client_id` INT UNSIGNED NOT NULL,
  `contrat_id` INT UNSIGNED NOT NULL,
  `formule_id` INT UNSIGNED NOT NULL,
  `debut` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `fin` TIMESTAMP NULL,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`client_id`, `contrat_id`),
  INDEX `fk_prestation_contrat1_idx` (`contrat_id` ASC),
  INDEX `fk_prestation_client1_idx` (`client_id` ASC),
  INDEX `fk_prestation_formule1_idx` (`formule_id` ASC),
  CONSTRAINT `fk_prestation_client1`
    FOREIGN KEY (`client_id`)
    REFERENCES `oust`.`client` (`client_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_prestation_contrat1`
    FOREIGN KEY (`contrat_id`)
    REFERENCES `oust`.`contrat` (`contrat_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_prestation_formule1`
    FOREIGN KEY (`formule_id`)
    REFERENCES `oust`.`formule` (`formule_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `oust` ;

-- -----------------------------------------------------
-- Placeholder table for view `oust`.`dechetteries`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `oust`.`dechetteries` (`dechetterie` INT, `localite` INT, `commune` INT, `canton` INT);

-- -----------------------------------------------------
-- Placeholder table for view `oust`.`acces_autorises`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `oust`.`acces_autorises` (`nom` INT, `prenom` INT, `nom_utilisateur` INT, `droits_acces` INT, `details_droits` INT);

-- -----------------------------------------------------
-- Placeholder table for view `oust`.`boites_louees_achetees`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `oust`.`boites_louees_achetees` (`nom` INT, `prenom` INT, `format_boite` INT, `prix` INT, `etat` INT);

-- -----------------------------------------------------
-- Placeholder table for view `oust`.`boites_stockees`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `oust`.`boites_stockees` (`format_boite` INT, `prix` INT);

-- -----------------------------------------------------
-- Placeholder table for view `oust`.`contrat_prestation_client`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `oust`.`contrat_prestation_client` (`nom` INT, `prenom` INT, `date_creation` INT, `date_resiliation` INT, `mode_paiement` INT, `paye` INT, `debut` INT, `fin` INT, `type` INT, `duree_mois` INT, `prix` INT, `nombre_passage_mois` INT);

-- -----------------------------------------------------
-- Placeholder table for view `oust`.`dechetteries_client`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `oust`.`dechetteries_client` (`nom` INT, `prenom` INT, `adresse_rue` INT, `adresse_numero` INT, `adresse_code_postal` INT, `localite` INT, `commune` INT, `canton` INT, `dechetterie` INT);

-- -----------------------------------------------------
-- Placeholder table for view `oust`.`current_mission`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `oust`.`current_mission` (`nom` INT, `prenom` INT, `adresse_rue` INT, `adresse_numero` INT, `adresse_code_postal` INT, `localite` INT, `commune` INT, `canton` INT, `dechetterie` INT);

-- -----------------------------------------------------
-- View `oust`.`dechetteries`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `oust`.`dechetteries` ;
DROP TABLE IF EXISTS `oust`.`dechetteries`;
USE `oust`;
CREATE  OR REPLACE VIEW `dechetteries` AS
    SELECT 
        dech.dechetterie,
        loc.localite,
        com.commune,
        com.canton
    FROM
        localite AS loc
            INNER JOIN
        dechetterie AS dech ON loc.dechetterie_id = dech.dechetterie_id
            INNER JOIN
        commune AS com ON loc.commune_id = com.commune_id;

-- -----------------------------------------------------
-- View `oust`.`acces_autorises`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `oust`.`acces_autorises` ;
DROP TABLE IF EXISTS `oust`.`acces_autorises`;
USE `oust`;
CREATE  OR REPLACE VIEW `acces_autorises` AS
    SELECT 
        employe.nom,
        employe.prenom,
        employe.nom_utilisateur,
        droits_acces.droits_acces,
        droits_acces.details_droits
    FROM
        employe
            INNER JOIN
        droits_acces ON employe.droits_acces_id = droits_acces.droits_acces_id;

-- -----------------------------------------------------
-- View `oust`.`boites_louees_achetees`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `oust`.`boites_louees_achetees` ;
DROP TABLE IF EXISTS `oust`.`boites_louees_achetees`;
USE `oust`;
CREATE  OR REPLACE VIEW `boites_louees_achetees` AS
    SELECT 
        c.nom, c.prenom, b.format_boite, b.prix, b.etat
    FROM
        boite AS b
            INNER JOIN
        client AS c ON b.client_id = c.client_id
    WHERE
        b.client_id IS NOT NULL;

-- -----------------------------------------------------
-- View `oust`.`boites_stockees`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `oust`.`boites_stockees` ;
DROP TABLE IF EXISTS `oust`.`boites_stockees`;
USE `oust`;
CREATE  OR REPLACE VIEW `boites_stockees` AS
    SELECT 
        format_boite, prix
    FROM
        boite
    WHERE
        client_id IS NULL;

-- -----------------------------------------------------
-- View `oust`.`contrat_prestation_client`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `oust`.`contrat_prestation_client` ;
DROP TABLE IF EXISTS `oust`.`contrat_prestation_client`;
USE `oust`;
CREATE  OR REPLACE VIEW `contrat_prestation_client` AS
    SELECT 
        cl.nom,
        cl.prenom,
        co.date_creation,
        co.date_resiliation,
        co.mode_paiement,
        co.paye,
        pr.client_id,
        pr.contrat_id,
        pr.debut,
        pr.fin,
        fo.type,
        fo.duree_mois,
        fo.prix,
        fo.nombre_passage_mois
    FROM
        prestation AS pr
            INNER JOIN
        client AS cl ON pr.client_id = cl.client_id
            INNER JOIN
        contrat AS co ON pr.contrat_id = co.contrat_id
            INNER JOIN
        formule AS fo ON pr.formule_id = fo.formule_id
	ORDER BY pr.fin;

-- -----------------------------------------------------
-- View `oust`.`dechetteries_client`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `oust`.`dechetteries_client` ;
DROP TABLE IF EXISTS `oust`.`dechetteries_client`;
USE `oust`;
CREATE  OR REPLACE VIEW `dechetteries_client` AS
    SELECT 
        cl.nom,
        cl.prenom,
        cl.adresse_rue,
        cl.adresse_numero,
        cl.adresse_code_postal,
        loc.localite,
        com.commune,
        com.canton,
        dech.dechetterie
    FROM
        client AS cl
            INNER JOIN
        localite AS loc ON cl.localite_id = loc.localite_id
            INNER JOIN
        commune AS com ON loc.commune_id = com.commune_id
            INNER JOIN
        dechetterie AS dech ON loc.dechetterie_id = dech.dechetterie_id;

-- -----------------------------------------------------
-- View `oust`.`current_mission`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `oust`.`current_mission` ;
DROP TABLE IF EXISTS `oust`.`current_mission`;
USE `oust`;
CREATE  OR REPLACE VIEW `current_mission` AS
    SELECT 
        c.nom,
        c.prenom,
        c.adresse_rue,
        c.adresse_numero,
        c.adresse_code_postal,
        loc.localite,
        com.commune,
        com.canton,
        dech.dechetterie
    FROM
        localite AS loc
            INNER JOIN
        commune AS com ON loc.commune_id = com.commune_id
            INNER JOIN
        dechetterie AS dech ON loc.dechetterie_id = dech.dechetterie_id
            INNER JOIN
        client AS c ON loc.localite_id = c.localite_id
    WHERE
        TIMESTAMPDIFF(DAY, c.prochain_passage, CURRENT_TIMESTAMP) = 0;
USE `oust`;

DELIMITER $$

USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`droits_acces_BEFORE_INSERT` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`droits_acces_BEFORE_INSERT` BEFORE INSERT ON `droits_acces` FOR EACH ROW
BEGIN
	SET NEW.last_update = CURRENT_TIMESTAMP;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`droits_acces_BEFORE_UPDATE` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`droits_acces_BEFORE_UPDATE` BEFORE UPDATE ON `droits_acces` FOR EACH ROW
BEGIN
	SET NEW.last_update = CURRENT_TIMESTAMP;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`commune_BEFORE_INSERT` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`commune_BEFORE_INSERT` BEFORE INSERT ON `commune` FOR EACH ROW
BEGIN
	SET NEW.last_update = CURRENT_TIMESTAMP;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`commune_BEFORE_UPDATE` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`commune_BEFORE_UPDATE` BEFORE UPDATE ON `commune` FOR EACH ROW
BEGIN
	SET NEW.last_update = CURRENT_TIMESTAMP;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`dechetterie_BEFORE_INSERT` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`dechetterie_BEFORE_INSERT` BEFORE INSERT ON `dechetterie` FOR EACH ROW
BEGIN
	SET NEW.last_update = CURRENT_TIMESTAMP;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`dechetterie_BEFORE_UPDATE` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`dechetterie_BEFORE_UPDATE` BEFORE UPDATE ON `dechetterie` FOR EACH ROW
BEGIN
	SET NEW.last_update = CURRENT_TIMESTAMP;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`localite_BEFORE_INSERT` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`localite_BEFORE_INSERT` BEFORE INSERT ON `localite` FOR EACH ROW
BEGIN
	SET NEW.last_update = CURRENT_TIMESTAMP;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`localite_BEFORE_UPDATE` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`localite_BEFORE_UPDATE` BEFORE UPDATE ON `localite` FOR EACH ROW
BEGIN
	SET NEW.last_update = CURRENT_TIMESTAMP;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`employe_BEFORE_INSERT` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`employe_BEFORE_INSERT` BEFORE INSERT ON `employe` FOR EACH ROW
BEGIN
	SET NEW.last_update = CURRENT_TIMESTAMP;
	SET NEW.email = LOWER(CONCAT(NEW.prenom, '.', NEW.nom, '@oust.ch'));
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`employe_BEFORE_UPDATE` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`employe_BEFORE_UPDATE` BEFORE UPDATE ON `employe` FOR EACH ROW
BEGIN
	SET NEW.last_update = CURRENT_TIMESTAMP;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`contrat_BEFORE_INSERT` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`contrat_BEFORE_INSERT` BEFORE INSERT ON `contrat` FOR EACH ROW
BEGIN
	SET NEW.last_update = CURRENT_TIMESTAMP;
	SET NEW.date_creation = CURRENT_TIMESTAMP;
	SET NEW.date_resiliation = NULL;
    
    IF ((NEW.paye = 0 AND NEW.mode_paiement <> 'aucun')
		OR (NEW.paye <> 0 AND NEW.mode_paiement = 'aucun')) THEN
			SIGNAL SQLSTATE '44000'
				SET MESSAGE_TEXT = 'invalid data for contrat.paye and contrat.mode_paiement';
    END IF;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`contrat_BEFORE_UPDATE` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`contrat_BEFORE_UPDATE` BEFORE UPDATE ON `contrat` FOR EACH ROW
BEGIN   
	SET NEW.last_update = CURRENT_TIMESTAMP;
    
	IF (OLD.date_resiliation <> NULL) THEN
		SIGNAL SQLSTATE '44000'
			SET MESSAGE_TEXT = 'UPDATE is not allowed when contrat.date_resiliation is already set';
	ELSEIF (OLD.date_creation <> NEW.date_creation) THEN
			SIGNAL SQLSTATE '44000'
				SET MESSAGE_TEXT = 'UPDATE of contrat.date_creation is not allowed';
	ELSEIF ((NEW.paye = 0 AND NEW.mode_paiement <> 'aucun')
			OR (NEW.paye <> 0 AND NEW.mode_paiement = 'aucun')) THEN
			SIGNAL SQLSTATE '44000'
				SET MESSAGE_TEXT = 'invalid data for contrat.paye and contrat.mode_paiement';
    END IF;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`client_BEFORE_INSERT` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER oust.client_BEFORE_INSERT BEFORE INSERT ON `client` FOR EACH ROW
BEGIN
  SET NEW.last_update = CURRENT_TIMESTAMP;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`client_AFTER_INSERT` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER oust.client_AFTER_INSERT AFTER INSERT ON `client` FOR EACH ROW
BEGIN
  UPDATE prestation
    SET last_update = CURRENT_TIMESTAMP
        WHERE client_id = NEW.client_id;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`client_BEFORE_UPDATE` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`client_BEFORE_UPDATE` BEFORE UPDATE ON `client` FOR EACH ROW
BEGIN
	SET NEW.last_update = CURRENT_TIMESTAMP;
    
	-- IF (OLD.jour_collect <> NEW.jour_collect) THEN
		SET @nbr_passage = 4 - (SELECT nombre_passage_mois
									FROM prestation AS pr
										INNER JOIN client AS cl
											ON pr.client_id = cl.client_id
										INNER JOIN contrat AS co
											ON pr.client_id = co.contrat_id
										INNER JOIN formule AS fo
											ON pr.formule_id = fo.formule_id
									WHERE co.date_resiliation IS NULL AND cl.client_id=NEW.client_id
								);
                                
	SET NEW.prochain_passage = DATE_ADD(nextDayOfWeek(CURRENT_TIMESTAMP, NEW.jour_collect), INTERVAL @nbr_passage week);
    -- END IF;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`boite_BEFORE_INSERT` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`boite_BEFORE_INSERT` BEFORE INSERT ON `boite` FOR EACH ROW
BEGIN
	SET NEW.last_update = CURRENT_TIMESTAMP;
    
	SET NEW.etat = 'en stock';
    SET NEW.client_id = NULL;
	SET NEW.date_pret = NULL;
    SET NEW.date_retour = NULL;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`boite_BEFORE_UPDATE` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`boite_BEFORE_UPDATE` BEFORE UPDATE ON `boite` FOR EACH ROW
BEGIN
	SET NEW.last_update = CURRENT_TIMESTAMP;
    
	IF (OLD.etat = 'achetée') THEN
		SIGNAL SQLSTATE '44000'
            SET MESSAGE_TEXT = 'invalid data';
	ELSEIF (NEW.etat = 'achetée') THEN
		SET NEW.date_pret = NULL;
		SET NEW.date_retour = NULL;
	ELSEIF (NEW.etat = 'en stock') THEN
		SET NEW.date_pret = NULL;
		SET NEW.date_retour = NULL;
		SET NEW.client_id = NULL;
	ELSEIF (NEW.etat = 'louée') THEN
		SET NEW.date_retour = DATE_ADD(NEW.date_pret, INTERVAL 3 month);
	END IF;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`formule_BEFORE_INSERT` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`formule_BEFORE_INSERT` BEFORE INSERT ON `formule` FOR EACH ROW
BEGIN   
	SET NEW.last_update = CURRENT_TIMESTAMP;
    
	IF (NEW.duree_mois < 1 OR NEW.nombre_passage_mois < 1) THEN
			SIGNAL SQLSTATE '44000'
				SET MESSAGE_TEXT = 'invalid data';
	END IF;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`formule_BEFORE_UPDATE` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`formule_BEFORE_UPDATE` BEFORE UPDATE ON `formule` FOR EACH ROW
BEGIN    
	SET NEW.last_update = CURRENT_TIMESTAMP;
    
	IF (NEW.duree_mois < 1 OR NEW.nombre_passage_mois < 1) THEN
			SIGNAL SQLSTATE '44000'
				SET MESSAGE_TEXT = 'invalid data';
	END IF;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`vehicule_BEFORE_INSERT` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`vehicule_BEFORE_INSERT` BEFORE INSERT ON `vehicule` FOR EACH ROW
BEGIN
	SET NEW.last_update = CURRENT_TIMESTAMP;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`vehicule_BEFORE_UPDATE` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`vehicule_BEFORE_UPDATE` BEFORE UPDATE ON `vehicule` FOR EACH ROW
BEGIN
	SET NEW.last_update = CURRENT_TIMESTAMP;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`mission_BEFORE_INSERT` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`mission_BEFORE_INSERT` BEFORE INSERT ON `mission` FOR EACH ROW
BEGIN
	SET NEW.last_update = CURRENT_TIMESTAMP;
	SET NEW.mission_id = CURRENT_TIMESTAMP;

	UPDATE vehicule 
	SET 
		kilometrage = kilometrage + NEW.distance_parcourue_km
	WHERE
		vehicule_id = NEW.vehicule_id;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`mission_BEFORE_UPDATE` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`mission_BEFORE_UPDATE` BEFORE UPDATE ON `mission` FOR EACH ROW
BEGIN
	SET NEW.last_update = CURRENT_TIMESTAMP;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`prestation_BEFORE_INSERT` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`prestation_BEFORE_INSERT` BEFORE INSERT ON `prestation` FOR EACH ROW
BEGIN
	SET NEW.last_update = CURRENT_TIMESTAMP;
    
	SET @duree = (SELECT duree_mois
					FROM formule
					WHERE formule_id = NEW.formule_id
				);
                    
	SET NEW.fin = DATE_ADD(NEW.debut, INTERVAL @duree month);
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`prestation_AFTER_INSERT` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`prestation_AFTER_INSERT` AFTER INSERT ON `prestation` FOR EACH ROW
BEGIN
	UPDATE client
		SET last_update = CURRENT_TIMESTAMP
        WHERE client_id = NEW.client_id;
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`prestation_BEFORE_UPDATE` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`prestation_BEFORE_UPDATE` BEFORE UPDATE ON `prestation` FOR EACH ROW
BEGIN
	SET NEW.last_update = CURRENT_TIMESTAMP;
    
	SET @duree = (SELECT duree_mois
					FROM formule
					WHERE formule_id = NEW.formule_id
				);
                    
	SET NEW.fin = DATE_ADD(NEW.debut, INTERVAL @duree month);
END$$


USE `oust`$$
DROP TRIGGER IF EXISTS `oust`.`prestation_AFTER_UPDATE` $$
USE `oust`$$
CREATE DEFINER = CURRENT_USER TRIGGER `oust`.`prestation_AFTER_UPDATE` AFTER UPDATE ON `prestation` FOR EACH ROW
BEGIN
	UPDATE client
		SET last_update = CURRENT_TIMESTAMP
        WHERE client_id = NEW.client_id;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
